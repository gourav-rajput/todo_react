{"ast":null,"code":"import _objectSpread from \"/Users/inclov/Documents/stuff/todo_react/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/inclov/Documents/stuff/todo_react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { ADD_NEW, TOGGLE_COMPLETE, DELETE_TODO } from \"../actionTypes\";\nvar INITIAL_STATE = {\n  list: [{\n    id: \"fc3647\",\n    content: \"This is some default item\",\n    completed: false\n  }, {\n    id: \"fc3747\",\n    content: \"This is some other default item\",\n    completed: false\n  }, {\n    id: \"fc9647\",\n    content: \"This is some default item\",\n    completed: true\n  }]\n};\n\nvar ToDoReducer = function ToDoReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_NEW:\n      state.list.push(action.payload.listItem);\n      return {\n        list: _toConsumableArray(state.list)\n      };\n\n    case TOGGLE_COMPLETE:\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = state.list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var temp = _step.value;\n\n          if (temp.id === action.payload.id) {\n            temp.completed = !temp.completed;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return {\n        list: _toConsumableArray(state.list)\n      };\n\n    case DELETE_TODO:\n      var newList = state.list.filter(function (item) {\n        return item.id !== action.payload.id;\n      });\n      return {\n        list: _toConsumableArray(newList)\n      };\n\n    default:\n      return _objectSpread({}, INITIAL_STATE);\n  }\n};\n\nexport default createStore(combineReducers({\n  todos: ToDoReducer\n}), {}, applyMiddleware(ReduxThunk));","map":{"version":3,"sources":["/Users/inclov/Documents/stuff/todo_react/src/app/reducers/index.js"],"names":["createStore","applyMiddleware","combineReducers","ReduxThunk","ADD_NEW","TOGGLE_COMPLETE","DELETE_TODO","INITIAL_STATE","list","id","content","completed","ToDoReducer","state","action","type","push","payload","listItem","temp","newList","filter","item","todos"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,WAAnC,QAAsD,gBAAtD;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,IAAI,EAAE,CACJ;AACEC,IAAAA,EAAE,EAAE,QADN;AAEEC,IAAAA,OAAO,EAAG,2BAFZ;AAGEC,IAAAA,SAAS,EAAE;AAHb,GADI,EAMJ;AACEF,IAAAA,EAAE,EAAE,QADN;AAEEC,IAAAA,OAAO,EAAG,iCAFZ;AAGEC,IAAAA,SAAS,EAAE;AAHb,GANI,EAWJ;AACEF,IAAAA,EAAE,EAAE,QADN;AAEEC,IAAAA,OAAO,EAAG,2BAFZ;AAGEC,IAAAA,SAAS,EAAE;AAHb,GAXI;AADc,CAAtB;;AAoBA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAqC;AAAA,MAAnCC,KAAmC,uEAA3BN,aAA2B;AAAA,MAAZO,MAAY;;AACvD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKX,OAAL;AACES,MAAAA,KAAK,CAACL,IAAN,CAAWQ,IAAX,CAAgBF,MAAM,CAACG,OAAP,CAAeC,QAA/B;AACA,aAAO;AAAEV,QAAAA,IAAI,qBAAOK,KAAK,CAACL,IAAb;AAAN,OAAP;;AACF,SAAKH,eAAL;AAAA;AAAA;AAAA;;AAAA;AACE,6BAAgBQ,KAAK,CAACL,IAAtB,8HAA2B;AAAA,cAAnBW,IAAmB;;AACzB,cAAIA,IAAI,CAACV,EAAL,KAAYK,MAAM,CAACG,OAAP,CAAeR,EAA/B,EAAmC;AACjCU,YAAAA,IAAI,CAACR,SAAL,GAAiB,CAAEQ,IAAI,CAACR,SAAxB;AACD;AACF;AALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAME,aAAO;AAAEH,QAAAA,IAAI,qBAAOK,KAAK,CAACL,IAAb;AAAN,OAAP;;AACF,SAAKF,WAAL;AACE,UAAIc,OAAO,GAAGP,KAAK,CAACL,IAAN,CAAWa,MAAX,CAAkB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACb,EAAL,KAAYK,MAAM,CAACG,OAAP,CAAeR,EAA/B;AAAA,OAAtB,CAAd;AACA,aAAO;AAAED,QAAAA,IAAI,qBAAOY,OAAP;AAAN,OAAP;;AACF;AACE,+BAAYb,aAAZ;AAfJ;AAiBD,CAlBD;;AAqBA,eAAeP,WAAW,CACxBE,eAAe,CAAC;AACdqB,EAAAA,KAAK,EAAEX;AADO,CAAD,CADS,EAGpB,EAHoB,EAGhBX,eAAe,CAACE,UAAD,CAHC,CAA1B","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport ReduxThunk from 'redux-thunk';\n\nimport { ADD_NEW, TOGGLE_COMPLETE, DELETE_TODO } from \"../actionTypes\";\n\nconst INITIAL_STATE = {\n  list: [\n    {\n      id: \"fc3647\",\n      content : \"This is some default item\",\n      completed: false\n    },\n    {\n      id: \"fc3747\",\n      content : \"This is some other default item\",\n      completed: false\n    },\n    {\n      id: \"fc9647\",\n      content : \"This is some default item\",\n      completed: true\n    }\n  ]\n}\n\nconst ToDoReducer = ( state = INITIAL_STATE, action ) => {\n  switch(action.type) {\n    case ADD_NEW :\n      state.list.push(action.payload.listItem);\n      return { list: [ ...state.list ] }\n    case TOGGLE_COMPLETE :\n      for(let temp of state.list){\n        if (temp.id === action.payload.id) {\n          temp.completed = !(temp.completed);\n        }\n      }\n      return { list: [ ...state.list ] }\n    case DELETE_TODO :\n      let newList = state.list.filter(item => item.id !== action.payload.id);  \n      return { list: [ ...newList ] }\n    default :\n      return { ...INITIAL_STATE }  \n  }\n}\n\n\nexport default createStore(\n  combineReducers({\n    todos: ToDoReducer\n  }), {}, applyMiddleware(ReduxThunk)\n);\n\n"]},"metadata":{},"sourceType":"module"}