{"ast":null,"code":"import _toConsumableArray from \"/Users/inclov/Documents/stuff/todo_react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/inclov/Documents/stuff/todo_react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/inclov/Documents/stuff/todo_react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/inclov/Documents/stuff/todo_react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/inclov/Documents/stuff/todo_react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/inclov/Documents/stuff/todo_react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/inclov/Documents/stuff/todo_react/src/app/components/index.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addNew, toggleComplete, deleteTodo } from \"../actions\";\nimport Button from \"./button\";\n\nvar ToDo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ToDo, _Component);\n\n  function ToDo(props) {\n    var _this;\n\n    _classCallCheck(this, ToDo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ToDo).call(this, props));\n\n    _this.getUniqueId = function (itemValue) {\n      var id = \"\";\n      itemValue.replace(/\\s/g, \"\");\n      var idString = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\" + itemValue;\n\n      for (var i = 0; i < 6; i++) {\n        id += idString.charAt(Math.floor(Math.random() * idString.length));\n      }\n\n      return id;\n    };\n\n    _this.handleIputChange = function (event) {\n      return _this.setState({\n        inputValue: event.target.value\n      });\n    };\n\n    _this.checkForDuplicate = function (inputValue) {\n      return _this.state.list.some(function (item) {\n        return inputValue === item.content;\n      });\n    };\n\n    _this.handleClickAdd = function () {\n      var inputValue = _this.state.inputValue;\n      inputValue = inputValue.trim();\n\n      if (inputValue !== \"\" && !_this.checkForDuplicate(inputValue)) {\n        var id = _this.getUniqueId(inputValue);\n\n        _this.props.addNew({\n          content: inputValue,\n          id: id\n        });\n      } else alert(\"Check the Input Value\");\n    };\n\n    _this.renderInput = function () {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        onChange: function onChange(event) {\n          return _this.handleIputChange(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }));\n    };\n\n    _this.renderAddButton = function () {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(Button, {\n        handleClick: function handleClick() {\n          return _this.handleClickAdd();\n        },\n        value: \"Add\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }));\n    };\n\n    _this.state = {\n      list: _toConsumableArray(props.list),\n      inputValue: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(ToDo, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, this.state.list.map(function (item, index) {\n        return React.createElement(\"div\", {\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, item.content), React.createElement(Button, {\n          handleClick: function handleClick() {\n            return _this2.props.toggleComplete(item.id);\n          },\n          value: item.completed ? \"Mark Uncomplete\" : \"Mark Completed\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }), React.createElement(Button, {\n          handleClick: function handleClick() {\n            return _this2.props.deleteTodo(item.id);\n          },\n          value: \"Delete\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }));\n      }), this.renderInput(), this.renderAddButton());\n    }\n  }]);\n\n  return ToDo;\n}(Component);\n\nToDo.getDerivedStateFromProps = function (nextProps, prevState) {\n  if (nextProps.list !== prevState.list) {\n    return {\n      list: _toConsumableArray(nextProps.list)\n    };\n  }\n\n  return null;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    list: state.todos.list\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addNew: addNew,\n  toggleComplete: toggleComplete,\n  deleteTodo: deleteTodo\n})(ToDo);","map":{"version":3,"sources":["/Users/inclov/Documents/stuff/todo_react/src/app/components/index.js"],"names":["React","Component","connect","addNew","toggleComplete","deleteTodo","Button","ToDo","props","getUniqueId","itemValue","id","replace","idString","i","charAt","Math","floor","random","length","handleIputChange","event","setState","inputValue","target","value","checkForDuplicate","state","list","some","item","content","handleClickAdd","trim","alert","renderInput","renderAddButton","map","index","completed","getDerivedStateFromProps","nextProps","prevState","mapStateToProps","todos"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,UAAjC,QAAmD,YAAnD;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IAGMC,I;;;;;AACJ,gBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,8EAAMA,KAAN;;AADgB,UAgBlBC,WAhBkB,GAgBJ,UAAAC,SAAS,EAAI;AACzB,UAAIC,EAAE,GAAG,EAAT;AACAD,MAAAA,SAAS,CAACE,OAAV,CAAkB,KAAlB,EAAyB,EAAzB;AACA,UAAIC,QAAQ,GAAG,mEAAiEH,SAAhF;;AACA,WAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACxBH,QAAAA,EAAE,IAAIE,QAAQ,CAACE,MAAT,CAAgBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,QAAQ,CAACM,MAApC,CAAhB,CAAN;AACD;;AACD,aAAOR,EAAP;AACD,KAxBiB;;AAAA,UA0BlBS,gBA1BkB,GA0BC,UAAAC,KAAK;AAAA,aAAI,MAAKC,QAAL,CAAc;AAAEC,QAAAA,UAAU,EAAGF,KAAK,CAACG,MAAN,CAAaC;AAA5B,OAAd,CAAJ;AAAA,KA1BN;;AAAA,UA4BlBC,iBA5BkB,GA4BE,UAAAH,UAAU;AAAA,aAAI,MAAKI,KAAL,CAAWC,IAAX,CAAgBC,IAAhB,CAAqB,UAAAC,IAAI;AAAA,eAAIP,UAAU,KAAKO,IAAI,CAACC,OAAxB;AAAA,OAAzB,CAAJ;AAAA,KA5BZ;;AAAA,UA8BlBC,cA9BkB,GA8BD,YAAM;AAAA,UACfT,UADe,GACA,MAAKI,KADL,CACfJ,UADe;AAErBA,MAAAA,UAAU,GAAGA,UAAU,CAACU,IAAX,EAAb;;AACA,UAAIV,UAAU,KAAK,EAAf,IAAqB,CAAC,MAAKG,iBAAL,CAAuBH,UAAvB,CAA1B,EAA8D;AAC5D,YAAIZ,EAAE,GAAG,MAAKF,WAAL,CAAiBc,UAAjB,CAAT;;AACA,cAAKf,KAAL,CAAWL,MAAX,CAAkB;AAAC4B,UAAAA,OAAO,EAAER,UAAV;AAAsBZ,UAAAA,EAAE,EAAFA;AAAtB,SAAlB;AACD,OAHD,MAGOuB,KAAK,CAAC,uBAAD,CAAL;AACR,KArCiB;;AAAA,UAuClBC,WAvCkB,GAuCJ;AAAA,aACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,QAAQ,EAAI,kBAAAd,KAAK;AAAA,iBAAI,MAAKD,gBAAL,CAAsBC,KAAtB,CAAJ;AAAA,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADY;AAAA,KAvCI;;AAAA,UA6ClBe,eA7CkB,GA6CA;AAAA,aAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,WAAW,EAAI;AAAA,iBAAM,MAAKJ,cAAL,EAAN;AAAA,SAAvB;AAAoD,QAAA,KAAK,EAAG,KAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADgB;AAAA,KA7CA;;AAGhB,UAAKL,KAAL,GAAa;AACXC,MAAAA,IAAI,qBAAMpB,KAAK,CAACoB,IAAZ,CADO;AAEXL,MAAAA,UAAU,EAAE;AAFD,KAAb;AAHgB;AAOjB;;;;6BA4CO;AAAA;;AACN,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,KAAKI,KAAL,CAAWC,IAAX,CAAgBS,GAAhB,CAAoB,UAACP,IAAD,EAAOQ,KAAP;AAAA,eAClB;AAAK,UAAA,GAAG,EAAER,IAAI,CAACnB,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAImB,IAAI,CAACC,OAAT,CADF,EAEE,oBAAC,MAAD;AAAQ,UAAA,WAAW,EAAI;AAAA,mBAAM,MAAI,CAACvB,KAAL,CAAWJ,cAAX,CAA0B0B,IAAI,CAACnB,EAA/B,CAAN;AAAA,WAAvB;AAAiE,UAAA,KAAK,EAAEmB,IAAI,CAACS,SAAL,GAAiB,iBAAjB,GAAqC,gBAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,EAGE,oBAAC,MAAD;AAAQ,UAAA,WAAW,EAAI;AAAA,mBAAM,MAAI,CAAC/B,KAAL,CAAWH,UAAX,CAAsByB,IAAI,CAACnB,EAA3B,CAAN;AAAA,WAAvB;AAA6D,UAAA,KAAK,EAAC,QAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,CADkB;AAAA,OAApB,CAFJ,EAUG,KAAKwB,WAAL,EAVH,EAWG,KAAKC,eAAL,EAXH,CADF;AAeD;;;;EApEgBnC,S;;AAAbM,I,CAUGiC,wB,GAA2B,UAACC,SAAD,EAAYC,SAAZ,EAA0B;AAC1D,MAAID,SAAS,CAACb,IAAV,KAAmBc,SAAS,CAACd,IAAjC,EAAuC;AACrC,WAAO;AAAEA,MAAAA,IAAI,qBAAOa,SAAS,CAACb,IAAjB;AAAN,KAAP;AACD;;AACD,SAAO,IAAP;AACD,C;;AAwDH,IAAMe,eAAe,GAAG,SAAlBA,eAAkB,CAAAhB,KAAK;AAAA,SAAK;AAAEC,IAAAA,IAAI,EAAED,KAAK,CAACiB,KAAN,CAAYhB;AAApB,GAAL;AAAA,CAA7B;;AAEA,eAAe1B,OAAO,CAACyC,eAAD,EAAkB;AACtCxC,EAAAA,MAAM,EAANA,MADsC;AAEtCC,EAAAA,cAAc,EAAdA,cAFsC;AAGtCC,EAAAA,UAAU,EAAVA;AAHsC,CAAlB,CAAP,CAIZE,IAJY,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addNew, toggleComplete, deleteTodo } from \"../actions\";\nimport Button from \"./button\";\n\n\nclass ToDo extends Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      list: [...props.list],\n      inputValue: \"\"\n    }\n  }\n\n  static getDerivedStateFromProps = (nextProps, prevState) => {\n    if (nextProps.list !== prevState.list) {\n      return { list: [ ...nextProps.list ] }\n    }\n    return null;\n  }\n\n  getUniqueId = itemValue => {\n    let id = \"\";\n    itemValue.replace(/\\s/g, \"\");\n    let idString = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"+itemValue;\n    for(let i = 0; i < 6; i++){\n      id += idString.charAt(Math.floor(Math.random() * idString.length));\n    }\n    return id;\n  }\n\n  handleIputChange = event => this.setState({ inputValue : event.target.value });\n\n  checkForDuplicate = inputValue => this.state.list.some(item => inputValue === item.content);\n\n  handleClickAdd = () => {\n    let { inputValue } = this.state;\n    inputValue = inputValue.trim();\n    if (inputValue !== \"\" && !this.checkForDuplicate(inputValue)) {\n      let id = this.getUniqueId(inputValue);\n      this.props.addNew({content: inputValue, id});\n    } else alert(\"Check the Input Value\");  \n  }\n\n  renderInput = () => (\n    <div>\n      <input onChange = {event => this.handleIputChange(event)} />\n    </div>\n  )\n\n  renderAddButton = () => (\n    <div>\n      <Button handleClick = {() => this.handleClickAdd()} value = \"Add\"/>\n    </div>\n  )\n\n  render(){\n    return(\n      <div>\n        {\n          this.state.list.map((item, index) => (\n            <div key={item.id}>\n              <p>{item.content}</p>\n              <Button handleClick = {() => this.props.toggleComplete(item.id)} value={item.completed ? \"Mark Uncomplete\" : \"Mark Completed\"} />\n              <Button handleClick = {() => this.props.deleteTodo(item.id)} value=\"Delete\" />\n            </div>\n          ))\n        }\n        {this.renderInput()}\n        {this.renderAddButton()}\n      </div>\n     )\n  }\n} \n\nconst mapStateToProps = state => ({ list: state.todos.list });\n\nexport default connect(mapStateToProps, {\n  addNew,\n  toggleComplete,\n  deleteTodo\n})(ToDo);\n"]},"metadata":{},"sourceType":"module"}